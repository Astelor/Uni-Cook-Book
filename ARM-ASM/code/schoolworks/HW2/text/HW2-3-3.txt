1. caculate 2's complement of r6 and put the result in r7

r0 
r1 mask (0xFFFFFFFF)
r2 
r3
r4
r5 
r6 input (0xABCD8765)=-2882373477
r7 result

2. set bits 1, 5, and 13 in register r6 and leave the remaining bits unchanged
use ORR

r0 
r1 mask1 (0xFFFFFFFF)
r2 mask2 (0010 0000 0010 0010) =0x2022
r3
r4
r5 
r6 input (0xABCD8765)=-2882373477
r7 result

3. clear bits 0, 4, and 12 in register r6 and leave the remaining bits unchanged.
use AND

r0 
r1 mask1 (0xFFFFFFFF)
r2 mask2 (0010 0000 0010 0010) =0x2022
r3 mask3 (1110 1111 1110 1110) =0xEFEE
r4
r5 
r6 input (0xABCD8765)=-2882373477
r7 result

4. change bits 4, 8, and 11 of r6
use EOR

r0 
r1 mask1 (0xFFFFFFFF)
r2 mask2 (0010 0000 0010 0010) =0x2022
r3 mask3 (1110 1111 1110 1110) =0xEFEE
r4 mask4 (0000 1001 0001 0000) =0x0910
r5 
r6 input (0xABCD8765)=-2882373477
r7 result

5.insert the value 0x5555 into the lower half of register r0 so that the final value is 0xBEEF5555, assuming register r0 contains the value 0xBEEFABCD.

r0 (5.)input 0xBEEFABCD
r1 mask1 (0xFFFFFFFF)
r2 mask2 (0010 0000 0010 0010) =0x2022
r3 mask3 (1110 1111 1110 1110) =0xEFEE
r4 mask4 (0000 1001 0001 0000) =0x0910
r5 mask5 0xFFFF0000
r6 (1.)input (0xABCD8765)=2882373477
r7 (1.)result
r8 temp